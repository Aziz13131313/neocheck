from flask import Flask, request
import requests
import re
import openai
import pandas as pd
from math import pi

ALL_DENSITIES = {
    "–ê–∫–≤–∞–º–∞—Ä–∏–Ω": 2.7, "–ê–≥–∞—Ç": 2.6, "–ñ–µ–º—á—É–≥": 2.7, "–ì–∞–≥–∞—Ç": 1.3, "–ì–µ–º–∞—Ç–∏—Ç": 5.3, "–ú–∞–ª–∞—Ö–∏—Ç": 4.0,
    "–î—ã–º—á–∞—Ç—ã–π –∫–≤–∞—Ä—Ü": 2.65, "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—Ç": 3.68, "–ê–º–µ—Ç–∏—Å—Ç": 2.65, "–¶–∏—Ä–∫–æ–Ω": 4.6, "–•—Ä—É—Å—Ç–∞–ª—å": 2.65,
    "–¢–æ–ø–∞–∑": 3.5, "–†—É–±–∏–Ω": 4.0, "–°–∞–ø—Ñ–∏—Ä": 4.0, "–ò–∑—É–º—Ä—É–¥": 2.7, "–°—Ç–µ–∫–ª–æ": 2.5, "–ü–ª–∞—Å—Ç–∏–∫": 1.2,
    "–≠–º–∞–ª—å": 2.3, "–ú–µ—Ç–∞–ª–ª": 8.0, "–§–ª—é–æ—Ä–∏—Ç": 3.18, "–ì—Ä–∞–Ω–∞—Ç": 4.1, "–§–∏–∞–Ω–∏—Ç": 5.5, "–•—Ä–∏–∑–æ–ª–∏—Ç": 3.3,
    "–ß–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫": 2.7, "–ü—è—Ç–∏–ª—É—á–µ–≤–∞—è": 2.7, "–ü–µ—Ä–ª–∞–º—É—Ç—Ä": 2.7
}

TELEGRAM_TOKEN = "7743518282:AAEQ29yMWS19-Tb4NTu5p02Rh68iI0cYziE"
TELEGRAM_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
OPENAI_API_KEY = "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"

client = openai.OpenAI(api_key=OPENAI_API_KEY)
app = Flask(__name__)

try:
    df_stones = pd.read_excel("—Ç–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–∞—è123.xlsx")
    df_stones["–î–ª–∏–Ω–∞"] = pd.to_numeric(df_stones["–î–ª–∏–Ω–∞"], errors="coerce")
    df_stones["–®–∏—Ä–∏–Ω–∞"] = pd.to_numeric(df_stones["–®–∏—Ä–∏–Ω–∞"], errors="coerce")
    df_stones["–í–µ—Å —Å–±—Ä–æ—Å–∞"] = pd.to_numeric(df_stones["–í–µ—Å —Å–±—Ä–æ—Å–∞"], errors="coerce")
    df_stones["–í—ã—Å–æ—Ç–∞"] = pd.to_numeric(df_stones["–í—ã—Å–æ—Ç–∞"], errors="coerce")
    df_stones["–§–æ—Ä–º–∞"] = df_stones["–§–æ—Ä–º–∞"].astype(str).str.lower().str.strip()
    df_stones["–ù–∞–∑–≤–∞–Ω–∏–µ"] = df_stones["–ù–∞–∑–≤–∞–Ω–∏–µ"].astype(str).str.capitalize().str.strip()
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:", e)
    df_stones = pd.DataFrame()

def extract_dimensions(text):
    numbers = re.findall(r"(\d+(?:[.,]\d+)?)", text)
    if len(numbers) >= 2:
        return float(numbers[0].replace(",", ".")), float(numbers[1].replace(",", "."))
    return None, None

def extract_manual_type(text):
    match = re.search(r"–í–∏–¥[:\s]+([–ê-–Ø–∞-—èA-Za-z-\s]+)", text)
    return match.group(1).strip() if match else None

def get_file_url(file_id):
    res = requests.get(f"{TELEGRAM_URL}/getFile?file_id={file_id}")
    try:
        path = res.json()["result"]["file_path"]
        return f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{path}"
    except KeyError:
        return None

def send_message(chat_id, text):
    requests.post(f"{TELEGRAM_URL}/sendMessage", json={"chat_id": chat_id, "text": text})

def find_closest_stone(length, width, form, stone_type):
    df_filtered = df_stones[
        (df_stones["–§–æ—Ä–º–∞"] == form) &
        (df_stones["–ù–∞–∑–≤–∞–Ω–∏–µ"] == stone_type)
    ].copy()
    df_filtered["delta"] = ((df_filtered["–î–ª–∏–Ω–∞"] - length)**2 + (df_filtered["–®–∏—Ä–∏–Ω–∞"] - width)**2)**0.5
    df_nearest = df_filtered[df_filtered["delta"] <= 3.0].sort_values(by="delta")
    if not df_nearest.empty:
        best = df_nearest.iloc[0]
        delta = best["delta"]
        if delta < 1.0:
            corrected_weight = best["–í–µ—Å —Å–±—Ä–æ—Å–∞"]
        else:
            correction = min(0.1 * delta, 0.15)
            if length > best["–î–ª–∏–Ω–∞"] or width > best["–®–∏—Ä–∏–Ω–∞"]:
                corrected_weight = round(best["–í–µ—Å —Å–±—Ä–æ—Å–∞"] * (1 + correction), 2)
            else:
                corrected_weight = round(best["–í–µ—Å —Å–±—Ä–æ—Å–∞"] * (1 - correction), 2)
        return best["–î–ª–∏–Ω–∞"], best["–®–∏—Ä–∏–Ω–∞"], best["–í—ã—Å–æ—Ç–∞"], corrected_weight
    return None

def identify_stone_with_vision(image_url):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–≥–µ–º–º–æ–ª–æ–≥. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Ä—É–∫–∏, –∫–æ–∂—É, –∫–æ–ª—å—Ü–∞. –û–ø—Ä–µ–¥–µ–ª–∏:\n- –í–∏–¥\n- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞\n- –§–æ—Ä–º—É (–æ–≤–∞–ª, –∫–∞–±–æ—à–æ–Ω, –º–∞—Ä–∫–∏–∑ –∏ —Ç.–¥.)\n\n–§–æ—Ä–º–∞—Ç:\n–í–∏–¥: [–ù–∞–∑–≤–∞–Ω–∏–µ]\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: [–í–∞—Ä–∏–∞–Ω—Ç]\n–§–æ—Ä–º–∞: [–§–æ—Ä–º–∞]"},
                {"role": "user", "content": [
                    {"type": "text", "text": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞–º–µ–Ω—å? –¢–æ–ª—å–∫–æ –∫–∞–º–µ–Ω—å –Ω–∞ —Ñ–æ—Ç–æ. –î–∞–π –≤–∏–¥, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –∏ —Ñ–æ—Ä–º—É."},
                    {"type": "image_url", "image_url": {"url": image_url}}
                ]}
            ],
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå Vision –æ—à–∏–±–∫–∞:", e)
        return None

@app.route("/", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]

        if "photo" in message:
            file_id = message["photo"][-1]["file_id"]
            caption = message.get("caption", "")
            length, width = extract_dimensions(caption)
            file_url = get_file_url(file_id)

            vision_result = identify_stone_with_vision(file_url)
            form, stone_type = None, None

            manual_type = extract_manual_type(caption)
            if manual_type:
                stone_type = manual_type.strip().capitalize()
            elif vision_result:
                form_match = re.search(r"–§–æ—Ä–º–∞[:\s]+(.+)", vision_result, re.IGNORECASE)
                if form_match:
                    form = form_match.group(1).strip().lower()
                type_match = re.search(r"–í–∏–¥[:\s]+(.+)", vision_result, re.IGNORECASE)
                if type_match:
                    stone_type = type_match.group(1).strip().capitalize().split("(")[0]
                    if stone_type.lower() == "–ø–µ—Ä–∏–¥–æ—Ç":
                        stone_type = "–•—Ä–∏–∑–æ–ª–∏—Ç"

            response_text = ""
            density = ALL_DENSITIES.get(stone_type)

            if length and width and form and stone_type and density:
                if form in ["—Å—Ñ–µ—Ä–∞", "—à–∞—Ä"]:
                    radius = length / 2
                    volume = (4/3) * pi * (radius ** 3)
                    weight = round(volume * density / 1000, 2)
                    response_text += f"‚ö´Ô∏è –°—Ñ–µ—Ä–∞\nüìè –î–∏–∞–º–µ—Ç—Ä: {length} –º–º\n‚öñÔ∏è –í–µ—Å: ~{weight} –≥\n"
                else:
                    result = find_closest_stone(length, width, form, stone_type)
                    if result:
                        best_length, best_width, best_height, corrected_weight = result
                        response_text += (
                            f"üìè –†–∞–∑–º–µ—Ä: {best_length} √ó {best_width} √ó {best_height} –º–º\n"
                            f"‚öñÔ∏è –í–µ—Å: ~{corrected_weight} –≥\n"
                            f"üìê –§–æ—Ä–º–∞: {form}\n"
                        )
                    else:
                        avg_h = (length + width) / 4
                        volume = (pi * length * width * avg_h) / 6
                        weight = round(volume * density / 1000, 2)
                        response_text += (
                            f"üìê –§–æ—Ä–º–∞: {form}\n"
                            f"üìè –†–∞–∑–º–µ—Ä: {length} √ó {width} √ó {round(avg_h, 2)} –º–º\n"
                            f"‚öñÔ∏è –†–∞—Å—á—ë—Ç–Ω—ã–π –≤–µ—Å: ~{weight} –≥ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ {density}\n"
                        )

            if vision_result:
                response_text += f"\nüß† Vision:\n{vision_result}"
            else:
                response_text += "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–º–µ–Ω—å."

            send_message(chat_id, response_text)
        else:
            send_message(chat_id, "üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞–º–Ω—è —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≤ –ø–æ–¥–ø–∏—Å–∏.")

    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)