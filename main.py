from flask import Flask, request
import requests
import re
import openai
import pandas as pd
from math import pi
import os

client = openai.OpenAI(
    api_key=os.getenv("OPENAI_API_KEY")
)

TELEGRAM_TOKEN = "7743518282:AAEQ29yMWS19-Tb4NTu5p02Rh68iI0cYziE"
TELEGRAM_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

ALL_DENSITIES = {
    "–ê–∫–≤–∞–º–∞—Ä–∏–Ω": 2.7, "–ê–≥–∞—Ç": 2.6, "–ñ–µ–º—á—É–≥": 2.7, "–ì–∞–≥–∞—Ç": 1.3, "–ì–µ–º–∞—Ç–∏—Ç": 5.3, "–ú–∞–ª–∞—Ö–∏—Ç": 4.0,
    "–î—ã–º—á–∞—Ç—ã–π –∫–≤–∞—Ä—Ü": 2.65, "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏—Ç": 3.68, "–ê–º–µ—Ç–∏—Å—Ç": 2.65, "–¶–∏—Ä–∫–æ–Ω": 4.6, "–•—Ä—É—Å—Ç–∞–ª—å": 2.65,
    "–¢–æ–ø–∞–∑": 3.5, "–†—É–±–∏–Ω": 4.0, "–°–∞–ø—Ñ–∏—Ä": 4.0, "–ò–∑—É–º—Ä—É–¥": 2.7, "–°—Ç–µ–∫–ª–æ": 2.5, "–ü–ª–∞—Å—Ç–∏–∫": 1.2,
    "–≠–º–∞–ª—å": 2.3, "–ú–µ—Ç–∞–ª–ª": 8.0, "–§–ª—é–æ—Ä–∏—Ç": 3.18, "–ì—Ä–∞–Ω–∞—Ç": 4.1, "–§–∏–∞–Ω–∏—Ç": 5.5, "–•—Ä–∏–∑–æ–ª–∏—Ç": 3.3,
    "–ü–µ—Ä–ª–∞–º—É—Ç—Ä": 2.7, "–ö–ª–µ–≤–µ—Ä": 2.7, "–ß–µ—Ç—ã—Ä–µ—Ö–ª–∏—Å—Ç–Ω–∏–∫": 2.7, "–ü—è—Ç–∏–ª–∏—Å—Ç–Ω–∏–∫": 2.7, "–®–µ—Å—Ç–∏–ª–∏—Å—Ç–Ω–∏–∫": 2.7
}

NORMALIZED_FORMS = {
    f.strip().lower(): f.strip().lower() for f in [
        '–≥—Ä—É—à–∞', '–∫–∞–±–æ—à–æ–Ω', '–∫–∞–±–æ—à–æ–Ω –æ–≤–∞–ª', '–∫–∞–±–æ—à–æ–Ω –∫–∞–ø–ª—è', '–∫–∞–±–æ—à–æ–Ω –∫–≤–∞–¥—Ä–∞—Ç', '–∫–∞–±–æ—à–æ–Ω –∫—Ä—É–≥',
        '–∫–∞–±–æ—à–æ–Ω –º–∞—Ä–∫–∏–∑', '–∫–∞–±–æ—à–æ–Ω –æ–≤–∞–ª', '–∫–∞–±–æ—à–æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', '–∫–∞–±–æ—à–æ–Ω —Å–µ—Ä–¥—Ü–µ', '–∫–∞–±–æ—à–æ–Ω —Å—Ñ–µ—Ä–∞',
        '–∫–∞–±–æ—à–æ–Ω —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–π –æ–≤–∞–ª', '–∫–∞–±—é—à–æ–Ω', '–∫–∞–ø–ª—è', '–∫–≤–∞–¥—Ä–∞—Ç', '–∫–ª–µ–≤–µ—Ä', '–∫—Ä—É–≥', '–º–∞—Ä–∫–∏–∑',
        '–æ–≤–∞–ª', '–æ–≤–∞–ª —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–π', '–ø–æ–ª—É–∫—Ä—É–≥', '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–π', '–ø—è—Ç–∏–ª–∏—Å—Ç–Ω–∏–∫',
        '—Ä–æ–º–±', '—Å–µ—Ä–¥—Ü–µ', '—Å—Ñ–µ—Ä–∞', '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', '—É–¥–ª–∏–Ω–µ–Ω–Ω—ã–π –æ–≤–∞–ª', '—Ñ–∞–Ω—Ç–∞–∑–∏—è', '—Ü–≤–µ—Ç–æ–∫',
        '—Ü–≤–µ—Ç–æ—á–Ω–∏–∫', '—á–µ—Ç—ã—Ä–µ—Ö–ª–∏—Å—Ç–Ω–∏–∫', '—à–µ—Å—Ç–∏–ª–∏—Å—Ç–Ω–∏–∫', '—à–∞—Ä'
    ]
}

app = Flask(__name__)

try:
    df_stones = pd.read_excel("—Ç–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–∞—è123.xlsx")
    df_stones["–î–ª–∏–Ω–∞"] = pd.to_numeric(df_stones["–î–ª–∏–Ω–∞"], errors="coerce")
    df_stones["–®–∏—Ä–∏–Ω–∞"] = pd.to_numeric(df_stones["–®–∏—Ä–∏–Ω–∞"], errors="coerce")
    df_stones["–í–µ—Å —Å–±—Ä–æ—Å–∞"] = pd.to_numeric(df_stones["–í–µ—Å —Å–±—Ä–æ—Å–∞"], errors="coerce")
    df_stones["–í—ã—Å–æ—Ç–∞"] = pd.to_numeric(df_stones["–í—ã—Å–æ—Ç–∞"], errors="coerce")
    df_stones["–§–æ—Ä–º–∞"] = df_stones["–§–æ—Ä–º–∞"].astype(str).str.lower().str.strip()
    df_stones["–ù–∞–∑–≤–∞–Ω–∏–µ"] = df_stones["–ù–∞–∑–≤–∞–Ω–∏–µ"].astype(str).str.capitalize().str.strip()
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:", e)
    df_stones = pd.DataFrame()

def extract_dimensions(text):
    numbers = re.findall(r"(\d+(?:[.,]\d+)?)", text)
    if len(numbers) >= 2:
        return float(numbers[0].replace(",", ".")), float(numbers[1].replace(",", "."))
    return None, None

def get_file_url(file_id):
    res = requests.get(f"{TELEGRAM_URL}/getFile?file_id={file_id}")
    try:
        path = res.json()["result"]["file_path"]
        return f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{path}"
    except KeyError:
        return None

def send_message(chat_id, text):
    requests.post(f"{TELEGRAM_URL}/sendMessage", json={"chat_id": chat_id, "text": text})

def identify_stone_with_vision(image_url):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": (
                    "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–≥–µ–º–º–æ–ª–æ–≥. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ø–∞–ª—å—Ü—ã, —Ç–µ–Ω–∏ –∏ —Ñ–æ–Ω. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n"
                    "–í–∏–¥: [–ù–∞–∑–≤–∞–Ω–∏–µ]\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: [–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞]\n–§–æ—Ä–º–∞: [–§–æ—Ä–º–∞]"
                )},
                {"role": "user", "content": [
                    {"type": "text", "text": "–ß—Ç–æ –∑–∞ –∫–∞–º–µ–Ω—å –Ω–∞ —Ñ–æ—Ç–æ?"},
                    {"type": "image_url", "image_url": {"url": image_url}}
                ]}
            ],
            max_tokens=300
        )
        result = response.choices[0].message.content.strip()
        return result
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ Vision:", e)
        return None

def normalize_form(f):
    f = f.strip().lower()
    return NORMALIZED_FORMS.get(f, f)

def find_closest_stone(length, width, form, stone_type):
    form = normalize_form(form)
    df_filtered = df_stones[(df_stones["–§–æ—Ä–º–∞"] == form) & (df_stones["–ù–∞–∑–≤–∞–Ω–∏–µ"] == stone_type)]
    df_filtered = df_filtered.copy()
    df_filtered["delta"] = ((df_filtered["–î–ª–∏–Ω–∞"] - length)**2 + (df_filtered["–®–∏—Ä–∏–Ω–∞"] - width)**2)**0.5
    df_nearest = df_filtered[df_filtered["delta"] <= 3.0].sort_values(by="delta")
    if not df_nearest.empty:
        best = df_nearest.iloc[0]
        delta = best["delta"]
        correction = min(0.1 * delta, 0.15)
        if delta < 1:
            weight = best["–í–µ—Å —Å–±—Ä–æ—Å–∞"]
        elif length > best["–î–ª–∏–Ω–∞"] or width > best["–®–∏—Ä–∏–Ω–∞"]:
            weight = round(best["–í–µ—Å —Å–±—Ä–æ—Å–∞"] * (1 + correction), 2)
        else:
            weight = round(best["–í–µ—Å —Å–±—Ä–æ—Å–∞"] * (1 - correction), 2)
        return best["–î–ª–∏–Ω–∞"], best["–®–∏—Ä–∏–Ω–∞"], best["–í—ã—Å–æ—Ç–∞"], weight
    return None

@app.route("/", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if "message" in data:
        msg = data["message"]
        chat_id = msg["chat"]["id"]
        caption = msg.get("caption", "")
        length, width = extract_dimensions(caption)
        file_id = msg["photo"][-1]["file_id"]
        url = get_file_url(file_id)
        vision = identify_stone_with_vision(url) or ""

        stone_type = re.search(r"–í–∏–¥[:\s]+(.+)", vision)
        form = re.search(r"–§–æ—Ä–º–∞[:\s]+(.+)", vision)
        stone_type = stone_type.group(1).strip().capitalize() if stone_type else None
        form = normalize_form(form.group(1).strip()) if form else None

        density = ALL_DENSITIES.get(stone_type)
        response = ""

        if length and width and form and stone_type and density:
            if form in ["—à–∞—Ä", "—Å—Ñ–µ—Ä–∞", "–∫–∞–±–æ—à–æ–Ω —Å—Ñ–µ—Ä–∞"]:
                radius = length / 2
                volume = (4/3) * pi * radius ** 3
                height = length
            elif form in ["–∫–ª–µ–≤–µ—Ä", "—á–µ—Ç—ã—Ä–µ—Ö–ª–∏—Å—Ç–Ω–∏–∫", "–ø—è—Ç–∏–ª–∏—Å—Ç–Ω–∏–∫", "—à–µ—Å—Ç–∏–ª–∏—Å—Ç–Ω–∏–∫"]:
                height = 2.0
                volume = (pi * length * width * height) / 6
            else:
                result = find_closest_stone(length, width, form, stone_type)
                if result:
                    l, w, h, weight = result
                    response += f"üìè {l}√ó{w}√ó{h} –º–º\n‚öñÔ∏è ~{weight} –≥\n–§–æ—Ä–º–∞: {form}\n"
                    send_message(chat_id, response + "\nüß† Vision:\n" + vision)
                    return "ok"
                height = (length + width) / 4
                volume = (pi * length * width * height) / 6
            weight = round(volume * density / 1000, 2)
            response += f"üìè {length}√ó{width}√ó{round(height,2)} –º–º\n‚öñÔ∏è ~{weight} –≥\n–§–æ—Ä–º–∞: {form}\n"
        else:
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥, —Ñ–æ—Ä–º—É –∏–ª–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å."

        response += "\nüß† Vision:\n" + vision
        send_message(chat_id, response)
    return "ok"

@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)








