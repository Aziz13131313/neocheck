from flask import Flask, request
import requests
import os
import re
import openai
import pandas as pd

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = openai.OpenAI(api_key=OPENAI_API_KEY)
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ç–∞–±–ª–∏—Ü—ã
try:
    df_stones = pd.read_excel("—Ç–∞–±–ª–∏—Ü–∞_–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è.xlsx")
    df_stones.columns = df_stones.columns.str.strip()
    df_stones["–î–ª–∏–Ω–∞"] = pd.to_numeric(df_stones["–î–ª–∏–Ω–∞"], errors="coerce")
    df_stones["–®–∏—Ä–∏–Ω–∞"] = pd.to_numeric(df_stones["–®–∏—Ä–∏–Ω–∞"], errors="coerce")
    df_stones["–í—ã—Å–æ—Ç–∞"] = pd.to_numeric(df_stones["–í—ã—Å–æ—Ç–∞"], errors="coerce")
    df_stones["–í–µ—Å —Å–±—Ä–æ—Å–∞"] = pd.to_numeric(df_stones["–í–µ—Å —Å–±—Ä–æ—Å–∞"], errors="coerce")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:", e)
    df_stones = pd.DataFrame()

# –ü–ª–æ—Ç–Ω–æ—Å—Ç–∏
DENSITY_MAP = {
    "—Ä—É–±–∏–Ω": 4.0, "—Ä–æ–∑–æ–≤—ã–π —Ä—É–±–∏–Ω": 4.0, "–∞–º–µ—Ç–∏—Å—Ç": 2.65, "—Ç–æ–ø–∞–∑": 3.5, "–≥—Ä–∞–Ω–∞—Ç": 3.95,
    "—Ö—Ä–∏–∑–æ–ª–∏—Ç": 3.3, "—Ü–∏—Ä–∫–æ–Ω": 4.6, "—à–ø–∏–Ω–µ–ª—å": 3.6, "—Ç—É—Ä–º–∞–ª–∏–Ω": 3.1, "–∞–∫–≤–∞–º–∞—Ä–∏–Ω": 2.7,
    "–∏–∑—É–º—Ä—É–¥": 2.8, "–≥–µ–º–∞—Ç–∏—Ç": 5.2, "–∫–≤–∞—Ä—Ü": 2.65, "–æ–±—Å–∏–¥–∏–∞–Ω": 2.4, "–∂–µ–º—á—É–≥": 2.7,
    "–º–∞–ª–∞—Ö–∏—Ç": 4.0, "—Å–∞–ø—Ñ–∏—Ä": 4.0, "—Ñ–ª—é–æ—Ä–∏—Ç": 3.2, "–≥–∞–≥–∞—Ç": 1.3, "–ø–ª–∞—Å—Ç–∏–∫": 1.2,
    "–º–µ—Ç–∞–ª–ª": 8.0, "—Å—Ç–µ–∫–ª–æ": 2.5, "—ç–º–∞–ª—å": 2.3, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": 2.5
}

SHAPE_COEFFS = {
    "–∫—Ä—É–≥": 0.0018, "–æ–≤–∞–ª": 0.0017, "—É–¥–ª–∏–Ω–µ–Ω–Ω—ã–π –æ–≤–∞–ª": 0.00165, "–º–∞—Ä–∫–∏–∑": 0.0016,
    "–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫": 0.0015, "–∫–≤–∞–¥—Ä–∞—Ç": 0.0016, "–≥—Ä—É—à–∞": 0.0016, "—Å–µ—Ä–¥—Ü–µ": 0.00155
}

def extract_dimensions(text):
    numbers = re.findall(r"(\d+(?:[.,]\d+)?)", text)
    if len(numbers) >= 2:
        return float(numbers[0].replace(",", ".")), float(numbers[1].replace(",", "."))
    return None, None

def get_file_url(file_id):
    res = requests.get(f"{TELEGRAM_URL}/getFile?file_id={file_id}")
    try:
        path = res.json()["result"]["file_path"]
        return f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{path}"
    except KeyError:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è file_path", res.text)
        return None

def send_message(chat_id, text):
    print("üì§ –û—Ç–≤–µ—Ç:", text)
    requests.post(f"{TELEGRAM_URL}/sendMessage", json={"chat_id": chat_id, "text": text})

def normalize_shape(vision_shape):
    if not vision_shape:
        return None
    vision_shape = vision_shape.lower()
    known_shapes = df_stones["–§–æ—Ä–º–∞"].dropna().unique()
    for shape in known_shapes:
        if shape.lower() in vision_shape or vision_shape in shape.lower():
            return shape
    return vision_shape

def normalize_stone_type(vision_type):
    if not vision_type:
        return None
    vision_type = vision_type.lower()
    if "—Ä—É–±–∏–Ω" in vision_type:
        return "—Ä—É–±–∏–Ω"
    if "—Ç—É—Ä–º–∞–ª–∏–Ω" in vision_type:
        return "—Ç—É—Ä–º–∞–ª–∏–Ω"
    return vision_type

def find_closest_stone(length, width, shape=None, stone_type=None, tolerance=2.0):
    if df_stones.empty:
        return None

    df_filtered = df_stones.copy()

    if shape:
        df_filtered = df_filtered[df_filtered["–§–æ—Ä–º–∞"].str.lower().str.contains(shape.lower())]
    if stone_type:
        df_filtered = df_filtered[df_filtered["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower().str.contains(stone_type.lower())]

    df_filtered["delta"] = ((df_filtered["–î–ª–∏–Ω–∞"] - length) ** 2 + (df_filtered["–®–∏—Ä–∏–Ω–∞"] - width) ** 2) ** 0.5
    df_nearest = df_filtered[df_filtered["delta"] <= tolerance].sort_values(by="delta")

    if not df_nearest.empty:
        best = df_nearest.iloc[0]
        delta_weight = best["delta"] * 0.03
        corrected_weight = round(best["–í–µ—Å —Å–±—Ä–æ—Å–∞"] - delta_weight, 2)
        return {
            "–í–∏–¥": best["–ù–∞–∑–≤–∞–Ω–∏–µ"],
            "–§–æ—Ä–º–∞": best["–§–æ—Ä–º–∞"],
            "–†–∞–∑–º–µ—Ä": f"{best['–î–ª–∏–Ω–∞']} √ó {best['–®–∏—Ä–∏–Ω–∞']} √ó {best['–í—ã—Å–æ—Ç–∞']} –º–º",
            "–í–µ—Å": corrected_weight
        }
    return None

def estimate_weight(length, width, shape, stone_type):
    density = DENSITY_MAP.get(stone_type, DENSITY_MAP["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
    coeff = SHAPE_COEFFS.get(shape, 0.0016)
    if length is None or width is None:
        return 0.0
    volume = coeff * length * width
    return round(volume * density, 2)

def identify_stone_with_vision(image_url):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–≥–µ–º–º–æ–ª–æ–≥. –û–ø—Ä–µ–¥–µ–ª–∏ –≤–∏–¥ –∏ —Ñ–æ—Ä–º—É –∫–∞–º–Ω—è. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–∏–¥: ...\n–§–æ—Ä–º–∞: ...\n–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ..."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞–º–µ–Ω—å?"},
                        {"type": "image_url", "image_url": {"url": image_url}}
                    ]
                }
            ],
            max_tokens=150
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ Vision:", e)
        return None

@app.route("/", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    print("üì© –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data)

    if "message" in data:
        message = data["message"]
        chat_id = message["chat"]["id"]

        if "photo" in message:
            file_id = message["photo"][-1]["file_id"]
            caption = message.get("caption", "")
            length, width = extract_dimensions(caption)
            file_url = get_file_url(file_id)

            stone_info = None
            vision_result = identify_stone_with_vision(file_url)

            shape = stone_type = None
            if vision_result:
                for line in vision_result.splitlines():
                    if line.lower().startswith("—Ñ–æ—Ä–º–∞"):
                        raw_shape = line.split(":", 1)[-1].strip()
                        shape = normalize_shape(raw_shape)
                    elif line.lower().startswith("–≤–∏–¥"):
                        raw_type = line.split(":", 1)[-1].strip()
                        stone_type = normalize_stone_type(raw_type)

            response_text = f"üìè –†–∞–∑–º–µ—Ä: {length} √ó {width} –º–º\n"

            if length and width:
                stone_info = find_closest_stone(length, width, shape, stone_type)
                if stone_info:
                    response_text += (
                        f"‚öñÔ∏è –í–µ—Å: ~{stone_info['–í–µ—Å']} –≥\n"
                        f"üìê –§–æ—Ä–º–∞: {stone_info['–§–æ—Ä–º–∞']}\n"
                    )
                elif shape and stone_type:
                    weight = estimate_weight(length, width, shape.lower(), stone_type.lower())
                    response_text += (
                        f"‚öñÔ∏è ~–í–µ—Å –ø–æ —Ñ–æ—Ä–º—É–ª–µ: {weight} –≥\n"
                        f"üìê –§–æ—Ä–º–∞: {shape}\n"
                    )

            if vision_result:
                response_text += f"\nüß† Vision:\n{vision_result}"

            send_message(chat_id, response_text)

        else:
            send_message(chat_id, "üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞–º–Ω—è —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≤ –ø–æ–¥–ø–∏—Å–∏.")

    return "ok"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)









